/* * Copyright 2012 Jordi CHARPENTIER jordi.charpentier@gmail.com *  * This file is part of JEditor. * JEditor is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * any later version. * JEditor is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * You should have received a copy of the GNU General Public License * along with JEditor.  If not, see <http://www.gnu.org/licenses/>. */package org.jc.ui.editeur.normal;import org.jc.ui.frames.*;import java.awt.*;import java.awt.event.*;import java.awt.print.*;import java.io.*;import java.net.*;import java.text.*;import java.util.*;import javax.swing.*;import javax.swing.event.*;import javax.swing.filechooser.*;import javax.swing.text.*;import javax.swing.text.DefaultHighlighter.*;import javax.swing.text.Highlighter.*;import javax.swing.undo.*;import org.jc.Constantes;import org.jc.ui.UndoRedo;/** * Classe représentant la fenêtre principale de l'éditeur normal. * * @author Jordi CHARPENTIER jordi.charpentier@gmail.com */public class Editeur extends JFrame {    /* Tool barre. */    private final JToolBar tool_barre = new JToolBar();    private final JButton bout_new = new JButton();    private final JButton bout_ouvrir = new JButton();    private final JButton bout_enregistrer = new JButton();    private final JButton bout_mail = new JButton();    private final JButton bout_chercher = new JButton();    private final JButton bout_imprimer = new JButton();    private final JButton bout_couper = new JButton();    private final JButton bout_copier = new JButton();    private final JButton bout_coller = new JButton();    /* Barre de menu. */    private final JMenuBar barre_menu = new JMenuBar();    private final JMenu menu_fichier = new JMenu();    private final JMenuItem sous_menu_nouveau = new JMenuItem();    private final JMenuItem sous_menu_ouvrir = new JMenuItem();    private final JMenuItem sous_menu_fermer_editeur = new JMenuItem();    private final JMenuItem sous_menu_enregistrer = new JMenuItem();    private final JMenuItem sous_menu_enregistrer_sous = new JMenuItem();    private final JMenuItem sous_menu_imprimer = new JMenuItem();    private final JMenuItem sous_menu_quitter = new JMenuItem();    private final JMenu menu_edition = new JMenu();    private final JMenuItem sous_menu_copier = new JMenuItem();    private final JMenuItem sous_menu_couper = new JMenuItem();    private final JMenuItem sous_menu_coller = new JMenuItem();    private final JMenuItem sous_menu_supprimer = new JMenuItem();    private final JMenuItem sous_menu_tout_selectionner = new JMenuItem();    private final JMenuItem sous_menu_recherche_globale = new JMenuItem();    private final JMenuItem sous_menu_plein_ecran = new JMenuItem();    private final JMenu menu_insertion = new JMenu();    private final JMenuItem sous_menu_date = new JMenuItem();    private final JMenuItem sous_menu_heure = new JMenuItem();    private final JMenu menu_fenetre = new JMenu();    private final JMenu menu_langages = new JMenu();    private final JRadioButtonMenuItem sous_menu_francais = new JRadioButtonMenuItem();    private final JRadioButtonMenuItem sous_menu_anglais = new JRadioButtonMenuItem();    private final JMenuItem sous_menu_statistiques = new JMenuItem();    private final JMenuItem sous_menu_new_fenetre = new JMenuItem();    private final JMenuItem sous_menu_fermer_fenetre = new JMenuItem();    private final JMenu menu_aide = new JMenu();    private final JMenuItem sous_menu_aide = new JMenuItem();    private final JMenuItem sous_menu_site = new JMenuItem();    private final JMenuItem sous_menu_jeditor = new JMenuItem();    /* Popup menu. */    private final JPopupMenu pop_up_menu = new JPopupMenu("Menu");    private final JMenuItem pop_up_couper = new JMenuItem();    private final JMenuItem pop_up_copier = new JMenuItem();    private final JMenuItem pop_up_coller = new JMenuItem();    private final JMenuItem pop_up_tout_selectionner = new JMenuItem();    /* Autres éléments graphiques. */    private final JTextPane zone_texte = new JTextPane();    private final JScrollPane barre_scroll = new JScrollPane(zone_texte);    private final JLabel lab_plein_ecran = new JLabel("<html><font size=\"6\"><strong>Appuyez sur ECHAP pour quitter le mode plein écran.</strong></font></html>");    /* Listeners. */    private final ActionsListener actionslistener = new ActionsListener();    private final UndoManager undo_redo_listener = new UndoManager();    /* Langues. */    private ResourceBundle traducteur;    private final Locale francais = new Locale("fr", "Français");    private final Locale anglais = new Locale("en", "Anglais");    /* Sélecteurs de fichiers. */    private final FileNameExtensionFilter ext_txt = new FileNameExtensionFilter("Fichiers .txt", "txt");    private final JFileChooser filechooser = new JFileChooser();    /* Autres. */    private final DefaultListCellRenderer center = new DefaultListCellRenderer();    private StyledDocument document;    private final HighlightPainter myHighlightPainter = new MyHighlightPainter(Color.CYAN);    private final GraphicsDevice device = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();    private String file_open = null;    private String extension_current_file = null;    public Editeur() {        this.setTitle("JEditor - Normal");        this.setJMenuBar(barre_menu);        this.setSize((int) this.getToolkit().getScreenSize().getWidth() - 60, ((int) this.getToolkit().getScreenSize().getHeight() - 60));        this.setLocationRelativeTo(null);        this.setFocusable(true);        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/content/images/icone.png")));        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);        this.addWindowListener(new WindowAdapter() {            @Override            public void windowClosing(WindowEvent e) {                testEnregistrerFichier("fermer");            }        });        this.setLayout(new BorderLayout());        this.add(tool_barre, BorderLayout.NORTH);        this.add(barre_scroll, BorderLayout.CENTER);        zone_texte.setFocusable(true);        zone_texte.requestFocus();        initBarreMenu();        initToolBarres();        initPopUpMenu();        initFileChooser();        initLangage();        enableOptionsBarreMenu();        setIconToolBarre();        setIconBarreMenu();        setIconPopuMenu();        setAccelerator();        setListener();        this.setVisible(true);    }    /* Méthodes graphiques. */        /**     * Méthode permettant d'initialiser la barre de menu de la fenêtre.     */    private void initBarreMenu() {        barre_menu.add(menu_fichier);        menu_fichier.setMnemonic(KeyEvent.VK_F);        menu_fichier.add(sous_menu_nouveau);        menu_fichier.add(sous_menu_ouvrir);        menu_fichier.addSeparator();        menu_fichier.add(sous_menu_fermer_editeur);        menu_fichier.add(sous_menu_enregistrer);        menu_fichier.add(sous_menu_enregistrer_sous);        menu_fichier.addSeparator();        menu_fichier.add(sous_menu_imprimer);        menu_fichier.addSeparator();        menu_fichier.add(sous_menu_quitter);        barre_menu.add(menu_edition);        menu_edition.setMnemonic(KeyEvent.VK_E);        Action undoaction = UndoRedo.getUndoAction(undo_redo_listener);        menu_edition.add(undoaction).setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, KeyEvent.CTRL_MASK));        ((AbstractButton) menu_edition.getMenuComponent(0)).setIcon(new ImageIcon(getClass().getResource("/content/images/autres/annuler.png")));        Action redoaction = UndoRedo.getRedoAction(undo_redo_listener);        menu_edition.add(redoaction).setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Y, KeyEvent.CTRL_MASK));        ((AbstractButton) menu_edition.getMenuComponent(1)).setIcon(new ImageIcon(getClass().getResource("/content/images/autres/refaire.png")));        menu_edition.addSeparator();        menu_edition.add(sous_menu_couper);        menu_edition.add(sous_menu_copier);        menu_edition.add(sous_menu_coller);        menu_edition.add(sous_menu_supprimer);        menu_edition.add(sous_menu_tout_selectionner);        menu_edition.addSeparator();        menu_edition.add(sous_menu_recherche_globale);        menu_edition.addSeparator();        menu_edition.add(sous_menu_plein_ecran);        barre_menu.add(menu_insertion);        menu_insertion.setMnemonic(KeyEvent.VK_I);        menu_insertion.add(sous_menu_date);        menu_insertion.add(sous_menu_heure);        barre_menu.add(menu_fenetre);        menu_fenetre.setMnemonic(KeyEvent.VK_N);        menu_fenetre.add(menu_langages);        menu_langages.add(sous_menu_francais);        menu_langages.add(sous_menu_anglais);        menu_fenetre.add(sous_menu_statistiques);        menu_fenetre.addSeparator();        menu_fenetre.add(sous_menu_new_fenetre);        menu_fenetre.add(sous_menu_fermer_fenetre);        barre_menu.add(menu_aide);        menu_aide.setMnemonic(KeyEvent.VK_A);        menu_aide.add(sous_menu_aide);        menu_aide.add(sous_menu_site);        menu_aide.add(sous_menu_jeditor);    }    /**     * Méthode permettant d'initialiser les tool barres de la fenêtre.     */    private void initToolBarres() {        center.setHorizontalAlignment(JLabel.CENTER);        tool_barre.setFloatable(false);        tool_barre.add(Box.createHorizontalStrut(5));        tool_barre.add(bout_new);        tool_barre.add(Box.createHorizontalStrut(10));        tool_barre.add(bout_ouvrir);        tool_barre.add(bout_enregistrer);        tool_barre.add(bout_mail);        tool_barre.add(Box.createHorizontalStrut(10));        tool_barre.add(bout_imprimer);        tool_barre.add(bout_chercher);        tool_barre.add(Box.createHorizontalStrut(10));        tool_barre.add(bout_couper);        tool_barre.add(bout_copier);        tool_barre.add(bout_coller);    }    /**     * Méthode permettant d'initialiser le menu pop-up (activé par un clic     * droit) de la fenêtre.     */    private void initPopUpMenu() {        pop_up_menu.add(pop_up_couper);        pop_up_menu.add(pop_up_copier);        pop_up_menu.add(pop_up_coller);        pop_up_menu.addSeparator();        pop_up_menu.add(pop_up_tout_selectionner);    }    /**     * Méthode permettant d'initialiser le sélecteur de fichier utilisé lors de     * l'enregistrement et de l'ouverture d'un fichier.     */    private void initFileChooser() {        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);        filechooser.setAcceptAllFileFilterUsed(false);        filechooser.addChoosableFileFilter(ext_txt);    }    /**     * Méthode permettant d'initialiser la fenêtre avec la langue par défaut du     * logiciel.     */    private void initLangage() {        traducteur = ResourceBundle.getBundle("content.textes.interface.texte", Locale.getDefault());        initStringWithRightLanguage();        ButtonGroup groupe_langage = new ButtonGroup();        groupe_langage.add(sous_menu_francais);        groupe_langage.add(sous_menu_anglais);        sous_menu_francais.setSelected(true);    }    /**     * Méthode permettant d'associer à certains éléments de la barre de menu une     * icône.     */    private void setIconBarreMenu() {        sous_menu_nouveau.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/nouveau.png")));        sous_menu_fermer_editeur.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/fermer.png")));        sous_menu_ouvrir.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/ouvrir.png")));        sous_menu_enregistrer.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/enregistrer.png")));        sous_menu_enregistrer_sous.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/enregistrer_sous.png")));        sous_menu_imprimer.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/imprimer.png")));        sous_menu_quitter.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/quitter.png")));        sous_menu_couper.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/couper.png")));        sous_menu_copier.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/copier.png")));        sous_menu_coller.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/coller.png")));        sous_menu_tout_selectionner.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/tout_selectionner.png")));        sous_menu_recherche_globale.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/rechercher.png")));        sous_menu_plein_ecran.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/plein_ecran.png")));        sous_menu_date.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/date.png")));        sous_menu_heure.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/heure.png")));        sous_menu_fermer_fenetre.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/fermer.png")));        sous_menu_aide.setIcon(new ImageIcon(getClass().getResource("/content/images/menu_aide/aide.png")));        sous_menu_jeditor.setIcon(new ImageIcon(getClass().getResource("/content/images/menu_aide/informations.png")));    }    /**     * Méthode permettant d'associer à certains éléments de la tool barre une     * icône.     */    private void setIconToolBarre() {        bout_new.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/nouveau.png")));        bout_ouvrir.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/ouvrir.png")));        bout_enregistrer.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/enregistrer.png")));        bout_mail.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/mail.png")));        bout_imprimer.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/imprimer.png")));        bout_chercher.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/rechercher.png")));        bout_couper.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/couper.png")));        bout_copier.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/copier.png")));        bout_coller.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/coller.png")));    }    /**     * Méthode permettant d'associer à certains éléments du menu pop-up une     * icône.     */    private void setIconPopuMenu() {        pop_up_copier.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/copier.png")));        pop_up_couper.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/couper.png")));        pop_up_coller.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/coller.png")));        pop_up_tout_selectionner.setIcon(new ImageIcon(getClass().getResource("/content/images/autres/tout_selectionner.png")));    }    /**     * Méthode permettant de mettre en place les listeners ("écouteurs")     * nécéssaires.<br />     * Plusieurs types de listeners sont mit en place (clavier/souris/clic).     */    private void setListener() {        /* Zone de texte. */        zone_texte.addMouseListener(new MouseAdapter() {            @Override            public void mouseReleased(MouseEvent e) {                if (SwingUtilities.isRightMouseButton(e)) {                    pop_up_menu.show(e.getComponent(), e.getX(), e.getY());                }            }        });        zone_texte.addKeyListener(new KeyAdapter() {            @Override            public void keyPressed(KeyEvent arg0) {                if (arg0.getKeyCode() == KeyEvent.VK_ESCAPE) {                    Editeur.this.remove(lab_plein_ecran);                    device.setFullScreenWindow(null);                } else {                    removeHighlights(zone_texte);                }            }        });        zone_texte.addCaretListener(new CaretListener() {            @Override            public void caretUpdate(CaretEvent e) {                enableOptionsBarreMenu();                removeHighlights(zone_texte);            }        });        zone_texte.getDocument().addUndoableEditListener(undo_redo_listener);        /* Barre de menu. */        sous_menu_nouveau.addActionListener(actionslistener);        sous_menu_fermer_editeur.addActionListener(actionslistener);        sous_menu_ouvrir.addActionListener(actionslistener);        sous_menu_enregistrer.addActionListener(actionslistener);        sous_menu_enregistrer_sous.addActionListener(actionslistener);        sous_menu_imprimer.addActionListener(actionslistener);        sous_menu_quitter.addActionListener(actionslistener);        sous_menu_copier.addActionListener(actionslistener);        sous_menu_couper.addActionListener(actionslistener);        sous_menu_coller.addActionListener(actionslistener);        sous_menu_supprimer.addActionListener(actionslistener);        sous_menu_tout_selectionner.addActionListener(actionslistener);        sous_menu_recherche_globale.addActionListener(actionslistener);        sous_menu_plein_ecran.addActionListener(actionslistener);        sous_menu_heure.addActionListener(actionslistener);        sous_menu_date.addActionListener(actionslistener);        sous_menu_francais.addActionListener(actionslistener);        sous_menu_anglais.addActionListener(actionslistener);        sous_menu_statistiques.addActionListener(actionslistener);        sous_menu_new_fenetre.addActionListener(actionslistener);        sous_menu_fermer_fenetre.addActionListener(actionslistener);        sous_menu_aide.addActionListener(actionslistener);        sous_menu_site.addActionListener(actionslistener);        sous_menu_jeditor.addActionListener(actionslistener);        /* Tool barres. */        bout_ouvrir.addActionListener(actionslistener);        bout_enregistrer.addActionListener(actionslistener);        bout_mail.addActionListener(actionslistener);        bout_new.addActionListener(actionslistener);        bout_couper.addActionListener(actionslistener);        bout_copier.addActionListener(actionslistener);        bout_coller.addActionListener(actionslistener);        bout_imprimer.addActionListener(actionslistener);        bout_chercher.addActionListener(actionslistener);        /* Menu popup. */        pop_up_copier.addActionListener(actionslistener);        pop_up_couper.addActionListener(actionslistener);        pop_up_coller.addActionListener(actionslistener);        pop_up_tout_selectionner.addActionListener(actionslistener);    }    /**     * Méthode permettant d'associer à certains éléments une combinaison de     * touches "raccourcie".<br />     * Effectuer cette combinaison permettra d'effectuer l'action associée à     * cette combinaison.     */    private void setAccelerator() {        /* ctrl + touche. */        sous_menu_nouveau.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, KeyEvent.CTRL_MASK));        sous_menu_ouvrir.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK));        sous_menu_enregistrer.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_MASK));        sous_menu_enregistrer_sous.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W, KeyEvent.CTRL_MASK));        sous_menu_copier.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_MASK));        sous_menu_couper.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_MASK));        sous_menu_coller.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_MASK));        sous_menu_tout_selectionner.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, KeyEvent.CTRL_MASK));        sous_menu_recherche_globale.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_MASK));        sous_menu_quitter.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, KeyEvent.CTRL_MASK));        /* alt + touche. */        sous_menu_date.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_D, KeyEvent.ALT_MASK));        sous_menu_heure.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_T, KeyEvent.ALT_MASK));        sous_menu_fermer_fenetre.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W, KeyEvent.ALT_MASK));        sous_menu_aide.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H, KeyEvent.ALT_MASK));        sous_menu_jeditor.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_J, KeyEvent.ALT_MASK));    }    /**     * Méthode permettant d'activer ou de désactiver certains éléments selon ce     * qui est contenu dans la zone de texte.<br />     * Par exemple, si la zone de texte ne contient rien, il est inutile     * d'activer la recherche de texte.     */    private void enableOptionsBarreMenu() {        if (zone_texte.getText().length() == 0) {            sous_menu_enregistrer.setEnabled(false);            sous_menu_enregistrer_sous.setEnabled(false);            sous_menu_copier.setEnabled(false);            sous_menu_couper.setEnabled(false);            sous_menu_supprimer.setEnabled(false);            sous_menu_tout_selectionner.setEnabled(false);            sous_menu_imprimer.setEnabled(false);            sous_menu_recherche_globale.setEnabled(false);            pop_up_couper.setEnabled(false);            pop_up_copier.setEnabled(false);            pop_up_tout_selectionner.setEnabled(false);        } else {            sous_menu_enregistrer.setEnabled(true);            sous_menu_enregistrer_sous.setEnabled(true);            sous_menu_copier.setEnabled(true);            sous_menu_couper.setEnabled(true);            sous_menu_supprimer.setEnabled(true);            sous_menu_tout_selectionner.setEnabled(true);            sous_menu_imprimer.setEnabled(true);            sous_menu_recherche_globale.setEnabled(true);            pop_up_couper.setEnabled(true);            pop_up_copier.setEnabled(true);            pop_up_tout_selectionner.setEnabled(true);        }    }    /* Méthodes permettant de surligner un texte. */    /**     * Méthode permettant de surligner un texte dans un composant textuel.     *     * @param textComp Le composant où l'on doit ajouter des éléments surlignés.     * @param pattern Le texte à surligner.     */    private boolean highlight(JTextComponent textComp, String pattern) {        boolean hasHighLight = false;        removeHighlights(textComp);        try {            Highlighter hilite = textComp.getHighlighter();            Document doc = textComp.getDocument();            String text = doc.getText(0, doc.getLength());            int pos = 0;            while ((pos = text.indexOf(pattern, pos)) >= 0) {                hilite.addHighlight(pos, pos + pattern.length(), myHighlightPainter);                pos += pattern.length();                hasHighLight = true;            }            return hasHighLight;        } catch (BadLocationException e) {            return hasHighLight;        }    }    /**     * Méthode permettant de supprimer les éléments surlignés dans un composant     * textuel.     *     * @param textComp Le composant où l'on doit supprimer les éléments     * surlignés.     */    private void removeHighlights(JTextComponent textComp) {        Highlighter hilite = textComp.getHighlighter();        Highlighter.Highlight[] hilites = hilite.getHighlights();        for (int i = 0; i < hilites.length; i++) {            if (hilites[i].getPainter() instanceof MyHighlightPainter) {                hilite.removeHighlight(hilites[i]);            }        }    }    private class MyHighlightPainter extends DefaultHighlightPainter {        public MyHighlightPainter(Color color) {            super(color);        }    }    /* Méthodes servant à enregistrer et ouvrir un fichier. */    /**     * Méthode permettant d'enregistrer un fichier.<br />     * La méthode va aussi tester si le nom du fichier entré existe déjà. Si     * c'est le cas, une confirmation va être demandée.     *     * @return <b>true</b> si le fichier a bien été     * enregistré.<br /><b>false</b> sinon.     */    private boolean enregistrerFichier() {        filechooser.addChoosableFileFilter(ext_txt);        if (filechooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {            extension_current_file = filechooser.getFileFilter().getDescription().substring(9);            file_open = filechooser.getSelectedFile() + extension_current_file;            if (!new File(file_open).exists()) {                if (filechooser.getFileFilter() == ext_txt) {                    try {                        FileWriter lu = new FileWriter(file_open);                        BufferedWriter out = new BufferedWriter(lu);                        out.write(zone_texte.getText());                        out.close();                    } catch (IOException er) {                        return false;                    }                    return true;                }            } else {                if (JOptionPane.showConfirmDialog(null, "Le fichier existe déjà. Voulez-vous continuer ?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.OK_OPTION) {                    enregistrerFichier(file_open);                } else {                    enregistrerFichier();                }            }        }        return false;    }    /**     * Méthode permettant d'enregistrer un fichier à une adresse déjà connue.     *     * @param adresse_fichier L'adresse du fichier.     * @return <b>true</b> si le fichier a bien été     * enregistré.<br /><b>false</b> sinon.     */    private boolean enregistrerFichier(String adresse_fichier) {        if (extension_current_file.equals(".txt")) {            try {                FileWriter lu = new FileWriter(adresse_fichier);                BufferedWriter out = new BufferedWriter(lu);                out.write(zone_texte.getText());                out.close();            } catch (IOException er) {                return false;            }            JOptionPane.showMessageDialog(null, "Fichier enregistré.", "Succès", JOptionPane.INFORMATION_MESSAGE);            return true;        }        return false;    }    /**     * Méthode permettant d'ouvrir un fichier si l'extension du fichier est     * gérée.<br />     *     * @return <b>true</b> si le fichier a bien été ouvert.<br /><b>false</b>     * sinon.     */    private boolean ouvrirFichier() {        filechooser.setCurrentDirectory(new File("."));        if (filechooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {            file_open = filechooser.getSelectedFile().toString();            if (file_open.endsWith(".txt")) {                BufferedReader br = null;                FileInputStream fis = null;                try {                    fis = new FileInputStream(file_open);                } catch (FileNotFoundException e) {                    return false;                }                br = new BufferedReader(new InputStreamReader(fis));                try {                    int n;                    while ((n = fis.available()) > 0) {                        char[] b = new char[n];                        int result = br.read(b);                        if (result == -1) {                            break;                        }                        String s = new String(b);                        zone_texte.setText(s);                    }                } catch (Exception err) {                    return false;                }                return true;            } else {                JOptionPane.showMessageDialog(null, "Extension non gérée.", "Erreur", JOptionPane.ERROR_MESSAGE);                return false;            }        }        return false;    }    /**     * Méthode permettant de tester si le document doit être enregistré ou non.     *     * @param action L'action à faire une fois les tests effectués.     */    private void testEnregistrerFichier(String action) {        if ((zone_texte.getText().length() == 0) && (file_open == null)) {            if (action.equals("fermer")) {                dispose();            } else if (action.equals("quitter")) {                System.exit(0);            }        } else {            int reponse = JOptionPane.showConfirmDialog(null, "Enregistrer les modifications ?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);            if (reponse == JOptionPane.NO_OPTION) {                if (action.equals("fermer")) {                    dispose();                } else if (action.equals("quitter")) {                    System.exit(0);                }            } else if (reponse == JOptionPane.YES_OPTION) {                enregistrerFichier();            }        }    }    /**     * Méthode permettant de tester si un document doit être enregistré     * lorsqu'un utilisateur veut ouvrir un nouveau fichier.     */    private void ouvrirFichierEtTestSiEnregistrerFichier() {        if ((zone_texte.getText().length() != 0) && (file_open == null)) {            int choix = JOptionPane.showConfirmDialog(null, "Enregistrer les modifications ?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);            if (choix == JOptionPane.OK_OPTION) {                enregistrerFichier();                ouvrirFichier();            } else if (choix == JOptionPane.NO_OPTION) {                ouvrirFichier();            }        } else if ((zone_texte.getText().length() == 0) && (file_open == null)) {            ouvrirFichier();        } else if ((zone_texte.getText().length() != 0) && (file_open != null)) {            int choix = JOptionPane.showConfirmDialog(null, "Enregistrer les modifications ?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);            if (choix == JOptionPane.OK_OPTION) {                enregistrerFichier();                ouvrirFichier();            } else if (choix == JOptionPane.NO_OPTION) {                ouvrirFichier();            }        }    }    /* Autres. */    /**     * Méthode permettant d'initialiser les différents menu/tool barre/... avec     * la langue choisie par l'utilisateur.     */    private void initStringWithRightLanguage() {        /* Barre de menu. */        menu_fichier.setText(traducteur.getString("menu.fichier"));        sous_menu_nouveau.setText(traducteur.getString("sous_menu_nouveau"));        sous_menu_ouvrir.setText(traducteur.getString("sous_menu_ouvrir"));        sous_menu_fermer_editeur.setText(traducteur.getString("sous_menu_fermer_editeur"));        sous_menu_enregistrer.setText(traducteur.getString("sous_menu_enregistrer"));        sous_menu_enregistrer_sous.setText(traducteur.getString("sous_menu_enregistrer_sous"));        sous_menu_imprimer.setText(traducteur.getString("sous_menu_imprimer"));        sous_menu_quitter.setText(traducteur.getString("sous_menu_quitter"));        menu_edition.setText(traducteur.getString("menu.edition"));        ((AbstractButton) menu_edition.getMenuComponent(0)).setText(traducteur.getString("annuler"));        ((AbstractButton) menu_edition.getMenuComponent(1)).setText(traducteur.getString("refaire"));        sous_menu_copier.setText(traducteur.getString("sous_menu_copier"));        sous_menu_couper.setText(traducteur.getString("sous_menu_couper"));        sous_menu_coller.setText(traducteur.getString("sous_menu_coller"));        sous_menu_supprimer.setText(traducteur.getString("sous_menu_supprimer"));        sous_menu_tout_selectionner.setText(traducteur.getString("sous_menu_tout_selectionner"));        sous_menu_recherche_globale.setText(traducteur.getString("sous_menu_rechercher"));        sous_menu_plein_ecran.setText(traducteur.getString("sous_menu_plein_ecran"));        menu_insertion.setText(traducteur.getString("menu.insertion"));        sous_menu_date.setText(traducteur.getString("sous_menu_date"));        sous_menu_heure.setText(traducteur.getString("sous_menu_heure"));        menu_fenetre.setText(traducteur.getString("menu.fenetre"));        sous_menu_new_fenetre.setText(traducteur.getString("sous_menu_new_fenetre"));        sous_menu_fermer_fenetre.setText(traducteur.getString("sous_menu_fermer_fenetre"));        menu_langages.setText(traducteur.getString("menu.langages"));        sous_menu_francais.setText(traducteur.getString("sous_menu_francais"));        sous_menu_anglais.setText(traducteur.getString("sous_menu_anglais"));        sous_menu_statistiques.setText(traducteur.getString("sous_menu_statistiques"));        menu_aide.setText(traducteur.getString("menu.aide"));        sous_menu_aide.setText(traducteur.getString("sous_menu_aide"));        sous_menu_site.setText(traducteur.getString("sous_menu_site"));        sous_menu_jeditor.setText(traducteur.getString("sous_menu_jeditor"));        /* Popup menu. */        pop_up_couper.setText(traducteur.getString("pop_up_couper"));        pop_up_copier.setText(traducteur.getString("pop_up_copier"));        pop_up_coller.setText(traducteur.getString("pop_up_coller"));        pop_up_tout_selectionner.setText(traducteur.getString("pop_up_tout_selectionner"));        /* Tool barre. */        bout_new.setToolTipText(traducteur.getString("bout_new"));        bout_ouvrir.setToolTipText(traducteur.getString("bout_ouvrir"));        bout_enregistrer.setToolTipText(traducteur.getString("bout_enregistrer"));        bout_mail.setToolTipText(traducteur.getString("bout_mail"));        bout_imprimer.setToolTipText(traducteur.getString("bout_imprimer"));        bout_chercher.setToolTipText(traducteur.getString("bout_chercher"));        bout_copier.setToolTipText(traducteur.getString("bout_copier"));        bout_coller.setToolTipText(traducteur.getString("bout_coller"));        bout_couper.setToolTipText(traducteur.getString("bout_couper"));    }    /**     * Méthode permettant de créer un nouveau document.<br />     * Si le document actuel n'est pas vide, il est proposé de l'enregistrer.     */    private void nouveauDocument() {        if (zone_texte.getText().length() != 0) {            int choix = JOptionPane.showConfirmDialog(null, "Enregistrer les modifications ?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);            if (choix == JOptionPane.OK_OPTION) {                enregistrerFichier();                zone_texte.setText("");                file_open = null;            } else if (choix == JOptionPane.NO_OPTION) {                zone_texte.setText("");            }        }    }    /**     * Méthode permettant de rechercher ou remplacer un texte dans le     * document.<br />     * Si le texte est trouvé, il est surligné.     */    private void rechercherEtRemplacerTexte() {        final RechercheTexte recherche_texte;        if (sous_menu_francais.isSelected()) {            recherche_texte = new RechercheTexte("francais");        } else {            recherche_texte = new RechercheTexte("anglais");        }        recherche_texte.addWindowListener(new WindowAdapter() {            @Override            public void windowClosed(WindowEvent e) {                if (recherche_texte.isRechercherSelected()) {                    if (!highlight(zone_texte, recherche_texte.getTexteARechercher())) {                        JOptionPane.showMessageDialog(null, "Texte non trouvé.", "Erreur", JOptionPane.ERROR_MESSAGE);                        rechercherEtRemplacerTexte();                    }                } else if (recherche_texte.isRemplacerSelected()) {                    String texte_a_chercher = recherche_texte.getTexteARechercher();                    String remplacer_par = recherche_texte.getTexteARemplacer();                    zone_texte.setText(zone_texte.getText().replaceAll(texte_a_chercher, remplacer_par));                    if (!highlight(zone_texte, remplacer_par)) {                        JOptionPane.showMessageDialog(null, "Texte non trouvé. Rien n'a été remplacé.", "Erreur", JOptionPane.ERROR_MESSAGE);                        rechercherEtRemplacerTexte();                    }                }            }        });    }    /**     * Méthode permettant d'imprimer le document actuel.     */    private void imprimerDocument() {        if (JOptionPane.showConfirmDialog(null, "Imprimer le fichier ?", "Impression", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.OK_OPTION) {            try {                zone_texte.print();            } catch (PrinterException e1) {                e1.printStackTrace();            }        }    }    /**     * Méthode permettant d'insérer la date actuelle dans le document.     */    private void insererDate() {        DateFormat format_date = new SimpleDateFormat("dd-MM-yyyy");        String date_to_string = format_date.format(new Date());        try {            document = (StyledDocument) zone_texte.getStyledDocument();            document.insertString(zone_texte.getCaretPosition(), date_to_string, null);        } catch (BadLocationException e1) {            e1.printStackTrace();        }    }    /**     * Méthode permettant d'insérer l'heure actuelle dans le document.     */    private void insererHeure() {        SimpleDateFormat sdf = new java.text.SimpleDateFormat("HH:mm");        String heure_to_string = sdf.format(new Date());        try {            document = (StyledDocument) zone_texte.getStyledDocument();            document.insertString(zone_texte.getCaretPosition(), heure_to_string, null);        } catch (BadLocationException e1) {            e1.printStackTrace();        }    }    /**     * Méthode permettant d'ouvrir une URL via le navigateur par défaut de     * l'utilisateur.     *     * @param url L'URL à visiter.     * @return <b>true</b> si l'URL a correctement été ouverte dans le     * navigateur par défaut.<br /><b>false</b> sinon.     */    public boolean ouvrirURL(String url) {        try {            Desktop.getDesktop().browse(new URI(url));            return true;        } catch (URISyntaxException | IOException e1) {            return false;        }    }    /**     * Méthode permettant de lire un fichier qui se situe dans le ".jar" du     * logiciel.     *     * @param path_file Le chemin du fichier à lire. Le fichier doit se situer     * dans le ".jar".     * @return Le contenu du fichier si la lecture s'est bien     * passée.<br /><b>-1</b> sinon.     */    private String lireFichier(String path_file) {        String contenu_fichier = "";        try {            int n;            InputStream fis = Editeur.this.getClass().getResourceAsStream(path_file);            while ((n = fis.available()) > 0) {                byte[] b = new byte[n];                int result = fis.read(b);                if (result == -1) {                    break;                }                contenu_fichier = new String(b);            }        } catch (Exception err) {            err.printStackTrace();                        return "-1";        }        return contenu_fichier;    }    /* Listener. */        /**     * Classe interne représentant un action listener.<br />     * Ici, le listener permet de détecter un click sur un objet.     *     * @author Jordi CHARPENTIER jordi.charpentier@gmail.com     */    private class ActionsListener implements ActionListener {        @Override        public void actionPerformed(ActionEvent e) {            zone_texte.requestFocus();            if ((e.getSource() == sous_menu_nouveau) || (e.getSource() == bout_new)) {                nouveauDocument();            } else if (e.getSource() == sous_menu_fermer_editeur) {                testEnregistrerFichier("fermer");            } else if ((e.getSource() == sous_menu_ouvrir) || (e.getSource() == bout_ouvrir)) {                ouvrirFichierEtTestSiEnregistrerFichier();            } else if ((e.getSource() == sous_menu_enregistrer || e.getSource() == bout_enregistrer) && (file_open != null)) {                enregistrerFichier(file_open);            } else if (((e.getSource() == sous_menu_enregistrer || e.getSource() == bout_enregistrer) && (file_open == null)) || (e.getSource() == sous_menu_enregistrer_sous)) {                enregistrerFichier();            } else if (e.getSource() == bout_mail) {                try {                    Desktop.getDesktop().mail();                } catch (IOException a) {                    JOptionPane.showMessageDialog(null, "Cette fonctionnalité n'est pas supportée par votre système.", "Erreur", JOptionPane.ERROR_MESSAGE);                }            } else if ((e.getSource() == sous_menu_imprimer) || (e.getSource() == bout_imprimer)) {                imprimerDocument();            } else if (e.getSource() == sous_menu_quitter) {                testEnregistrerFichier("quitter");            } else if ((e.getSource() == sous_menu_couper) || (e.getSource() == bout_couper) || (e.getSource() == pop_up_couper)) {                if (zone_texte.getSelectedText() == null); else {                    zone_texte.cut();                }            } else if ((e.getSource() == sous_menu_copier) || (e.getSource() == bout_copier) || (e.getSource() == pop_up_copier)) {                if (zone_texte.getSelectedText() == null); else {                    zone_texte.copy();                }            } else if ((e.getSource() == sous_menu_coller) || (e.getSource() == bout_coller) || (e.getSource() == pop_up_coller)) {                zone_texte.paste();            } else if (e.getSource() == sous_menu_supprimer) {                if (zone_texte.getSelectedText() == null); else {                    zone_texte.replaceSelection("");                }            } else if ((e.getSource() == sous_menu_tout_selectionner) || (e.getSource() == pop_up_tout_selectionner)) {                zone_texte.selectAll();            } else if ((e.getSource() == sous_menu_recherche_globale) || (e.getSource() == bout_chercher)) {                rechercherEtRemplacerTexte();            } else if (e.getSource() == sous_menu_plein_ecran) {                if (device.isFullScreenSupported()) {                    device.setFullScreenWindow(Editeur.this);                    Editeur.this.add(lab_plein_ecran, BorderLayout.SOUTH);                } else {                    JOptionPane.showMessageDialog(null, "Le mode plein ecran n'est pas disponible", "Erreur", JOptionPane.ERROR_MESSAGE);                }            } else if (e.getSource() == sous_menu_heure) {                insererHeure();            } else if (e.getSource() == sous_menu_date) {                insererDate();            } else if (e.getSource() == sous_menu_francais) {                traducteur = ResourceBundle.getBundle("content.textes.interface.texte", francais);                initStringWithRightLanguage();            } else if (e.getSource() == sous_menu_anglais) {                traducteur = ResourceBundle.getBundle("content.textes.interface.texte", anglais);                initStringWithRightLanguage();            } else if (e.getSource() == sous_menu_statistiques) {                if (sous_menu_francais.isSelected()) {                    new Statistiques("Francais", zone_texte.getText());                } else {                    new Statistiques("Anglais", zone_texte.getText());                }            } else if (e.getSource() == sous_menu_new_fenetre) {                new Editeur();            } else if (e.getSource() == sous_menu_fermer_fenetre) {                testEnregistrerFichier("fermer");            } else if (e.getSource() == sous_menu_aide) {                if (sous_menu_francais.isSelected()) {                    new Aide(lireFichier("/content/textes/raccourcis/editeur_n/raccourcis"));                } else {                    new Aide(lireFichier("/content/textes/raccourcis/editeur_n/raccourcis_en"));                }            } else if (e.getSource() == sous_menu_site) {                ouvrirURL(Constantes.URL_SITE);            } else if (e.getSource() == sous_menu_jeditor) {                if (sous_menu_francais.isSelected()) {                    new JEditor("francais");                } else {                    new JEditor("anglais");                }            }        }    }}